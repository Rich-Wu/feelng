<div class="background" style="background-image: linear-gradient(rgba(0,0,0,.5), rgba(0,0,0,.5)), url(<%=@photo['urls']['full']%>);">
</div>
<div class="header">
  <h1>The Mood Is: <%= image_tag("emojis/#{@mood}") %></h1>
</div>

<%= render 'shared/poem' %>
<%= render 'shared/music' %>
<div class="feature" id="event" style="background-color: <%= @photo['color'] %>">
  <h2>Do</h2>
  <h3><%= @event['venue']['name'] %></h3>
  <p><%= @event['venue']['location']['formattedAddress'].join(" ") %></p>
</div>

<div class="player">
  <button id="prev">Previous</button>
  <button id="play">Play/Pause</button>
  <button id="next">Next</button>
  <p id="track_name">Track Name:</p>
  <p id="artist">Artist: </p>
  <p id="album">Album: </p>
</div>

<script src="https://sdk.scdn.co/spotify-player.js"></script>

<script>
  window.onSpotifyWebPlaybackSDKReady = () => {
      const token = "<%=current_spotify_user.access_token.to_s%>";
      const player = new Spotify.Player({
          name: "Feelng's Player",
          getOauthToken: cb => { cb(token); }
      });

      player.addListener('initialization_error', ({ message }) => { console.error(message); });
        player.addListener('authentication_error', ({ message }) => { console.error(message); });
        player.addListener('account_error', ({ message }) => { console.error(message); });
        player.addListener('playback_error', ({ message }) => { console.error(message); });

        // Playback status updates
        player.addListener('player_state_changed', state => { console.log(state); });

        player.addListener('player_state_changed', ({
            track_window: {current_track}
        }) => {
            document.getElementById("track_name").innerHTML = "Track Name " + current_track.name;
            document.getElementById("artist").innerHTML = "Artist: " + current_track.artists[0].name;
            document.getElementById("album").innerHTML = "Album: " + current_track.album.name;
        });

        // Ready
        player.addListener('ready', ({ device_id }) => {
          console.log('Ready with Device ID', device_id);
        });

        // Not Ready
        player.addListener('not_ready', ({ device_id }) => {
          console.log('Device ID has gone offline', device_id);
        });



        document.getElementById("prev").addEventListener("click", function() {
            player.pause().then(() => console.log("previous track playing"))
        });
        document.getElementById("play").addEventListener("click", function() {
            player.togglePlay().then(() => console.log("Playback toggled"))
        });
        document.getElementById("next").addEventListener("click", function() {
            player.nextTrack().then(() => console.log("Next Track Playing"))
        });

        // Connect to the player!
        player.connect();



  };

  function play(device_id) {
  $.ajax({
    url: "https://api.spotify.com/v1/me/player/play?device_id=" + device_id,
    type: "PUT",
    data: '{"uris": ["spotify:track:65ES1qwOB577ZnTkizMXJJ"]}',
    beforeSend: function(xhr){xhr.setRequestHeader('Authorization', 'Bearer <%=current_spotify_user.access_token%>' );},
    success: function(data) {
        console.log(data)
    }
  });
}

</script>
