<div class="background" style="background-image: linear-gradient(rgba(0,0,0,.5), rgba(0,0,0,.5)), url(<%=@photo['urls']['full']%>);">
</div>

<!-- RESULTS HEADER & MOOD ELEMENTS -->
<div id="header">
  <h1>The Mood Is:</h1>
  <%= image_tag("emojis/#{@mood}") %>
</div>
<div id="save_mood">
  <!-- Form to save current mood  -->
  <%= form_for @entry, url: new_entry_path(@entry) do |f| %>
    <% if current_spotify_user %>
      <%= f.hidden_field :mood, :value=>@mood%>
      <%= f.hidden_field :photo, :value=>JSON.generate(@photo)%>
      <% if current_spotify_user %>
        <%= f.hidden_field :playlist, :value=>JSON.generate(@playlist)%>
      <% end %>
      <%= f.hidden_field :event, :value=>JSON.generate(@event)%>
      <%= f.hidden_field :poem, :value=>JSON.generate(@poem)%>
      <%= button_tag type: 'submit', title: 'Save this mood' do %>
        <i class="fas fa-save"></i>
      <% end %>
    <% end %>
  <% end %>
</div>

<%= render 'shared/poem' %>
<%= render 'shared/music' %>
<%= render 'shared/event' %>

<div class="chat-popup" id="myForm" style="border: 10px solid <%=@photo['color']%>">
  <%= render partial: 'chatrooms/chatroom' %>
</div>

<!-- SPOTIFY CONTROLLERS -->
<%if current_spotify_user%>
  <div class="player">
    <button id="prev">Previous</button>
    <button id="play">Play/Pause</button>
    <button id="next">Next</button>
    <p id="track_name">Track Name:</p>
    <p id="artist">Artist: </p>
    <p id="album">Album: </p>
  </div>
<%else%>

<%end%>


<!-- <img src="#" alt="Album Cover" id="album_cover"> -->
<% if current_spotify_user%>

  <script src="https://sdk.scdn.co/spotify-player.js"></script>
  <script>
  console.log("We in it boys")
    //getting token and playlist uri from controller
    const playlist_uri = "<%=@playlist_uri%>";
    const token = "<%=current_spotify_user.access_token%>"

    async function play (device_id,playlist) {
        return new Promise((resolve) => {
          fetch(`https://api.spotify.com/v1/me/player/play?device_id=${device_id}`, {
              method: 'PUT',
              body: JSON.stringify({
              "context_uri": playlist
              }),
              headers: {
              Authorization: `Bearer ${token}`
              }
          }).then(resolve);
              });
    }

    window.onSpotifyWebPlaybackSDKReady = () => {};

    async function waitForSpotifyWebPlaybackSDKToLoad () {
      return new Promise(resolve => {
    if (window.Spotify) {
      resolve(window.Spotify);
    } else {
      window.onSpotifyWebPlaybackSDKReady = () => {
        resolve(window.Spotify);
      };
    }
      });
    };

    async function waitUntilUserHasSelectedPlayer (sdk) {
      return new Promise(resolve => {
    let interval = setInterval(async () => {
      let state = await sdk.getCurrentState();
      if (state !== null) {
        resolve(state);
        clearInterval(interval);
      }
    });
      });
    };



    (async () => {
      const { Player } = await waitForSpotifyWebPlaybackSDKToLoad();

      const sdk = new Player({
    name: "Feelng's Player",
    volume: 1.0,
    getOAuthToken: callback => { callback(token); }
      });
       // Playback state has changed
    sdk.on("player_state_changed", state => {
  let {
      id,
      uri: track_uri,
      name: track_name,
      duration_ms,
      position,
      artists,
              album: {
                  name: album_name,
                  uri: album_uri,
                  images: album_images
              }
  } = state.track_window.current_track;

  console.log(state);
  $('#track_name').text('Track Name: ' + track_name);
          $('#artist').text('  |  Artist: ' + artists[0].name);
          $('#album').text('  |  Album: ' + album_name);
          $('#album_cover').attr('src', album_images[0].url);
    });

      document.getElementById("prev").addEventListener("click", async function() {
            await sdk.previousTrack();
        });
        document.getElementById("play").addEventListener("click", async function() {
            await sdk.togglePlay();
        });
        document.getElementById("next").addEventListener("click", async function() {
            await sdk.nextTrack();
        });

      // Ready
      sdk.on('ready', data => {
    let { device_id } = data;

    // Play a track using our new device ID
    console.log('Ready with Device ID', device_id);
    play(device_id,playlist_uri);
      });

      let connected = await sdk.connect();
      if (connected) {
    console.log("Waiting for player to be selected ...");
    let state = await waitUntilUserHasSelectedPlayer(sdk);
    console.log("Player has been selected!");

    await sdk.resume();


    let {
      id,
      uri: track_uri,
      name: track_name,
      duration_ms,
      artists,
      album: {
        name: album_name,
        uri: album_uri,
        images: album_images
      }
    } = state.track_window.current_track;

    console.log(`You're listening to ${track_name} by ${artists[0].name}!`);
      } else {
    console.error("Failed to connect Player");
      }
    })();
  </script>
<%end%>

<%= javascript_include_tag 'pages', 'results' %>
