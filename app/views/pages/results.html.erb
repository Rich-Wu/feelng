<h1>The Mood Is</h1>
<%= image_tag("emojis/#{@mood}") %>

<button id="prev">Previous</button>
<button id="play">Play/Pause</button>
<button id="next">Next</button>
<p id="track_name">Track Name:</p>
<p id="artist">Artist: </p>
<p id="album">Album: </p>
<img src="#" alt="Album Cover" id="album_cover">
<p id="playlist_name"> <%= @playlist_name %> </p>
<img src="<%=@playlist_img%>" alt="" id="playlist_img">


<script src="https://sdk.scdn.co/spotify-player.js"></script>

<script>
    //getting token and playlist uri from controller
    const playlist_uri = "<%=@playlist_uri.to_s%>";
    const token = "<%=current_spotify_user.access_token.to_s%>"

    //intiialize sdk
    window.onSpotifyWebPlaybackSDKReady = () => {};

    //async methods for waiting for sdk to load and also for player to be selected
    async function waitForSDKLoad() {
        return new Promise( (resolve) => {
            const interval = setInterval(() => {
                if (window.Spotify) {
                    resolve(window.Spotify);
                    clearInterval(interval);
                }
                else {
                    window.onSpotifyWebPlaybackSDKReady = () => {
                        resolve(window.Spotify);
                    };
                }
            });
        });
    };

    async function waitForPlayerSelect(sdk) {
        return new Promise((resolve) => {
            let interval = setInterval(async() => {
                let state = await sdk.getCurrentState();
                if (state !== null) {
                    resolve();
                    clearInterval(interval);
                }
            });
        });
    };

    async function play(device_id, playlist) {
        return new Promise((resolve) => {
            fetch(`https://api.spotify.com/v1/me/player/player?device_id=${device_id}`, {
                method: 'PUT',
                body: JSON.stringify({
                    context_uri: [playlist]
                }),
                headers: {
                    Authorization: `Bearer ${token}`
                }
            }).then(resolve);
        });
    }

    (async () => {
        const { Player } = await waitForSDKLoad();
        console.log("We loaded async-ly");

        const sdk = new Player({
            name: "Feelng's Player",
            getOauthToken: cb => { cb(token);}
        });

        sdk.on("player_state_changed", state => {
            let {
                id,
                uri: track_uri,
                name: track_name,
                duration_ms,
                position, 
                artists,
                album: {
                    name: album_name,
                    uri: album_uri,
                    images: album_images
                }
            } = state.track_window.current_track;
            $('#track_name').innerHTML('Track Name: ' + track_name);
            $('#artist').innerHTML('Artist: ' + artists[0].name);
            $('#album').innerHTML('Album: ' + album_name);
            $('#album_cover').attr('src', album_images[0].url);
        });



        document.getElementById("prev").addEventListener("click", async function() {
            await sdk.previousTrack();
        });
        document.getElementById("play").addEventListener("click", async function() {
            await sdk.togglePlay();
        });
        document.getElementById("next").addEventListener("click", async function() {
            await sdk.nextTrack();
        });

        sdk.on('ready', data => {
            let { device_id } = data;
            console.log('Ready with Device ID', device_id);
            play(device_id, playlist_uri);
        });

        let connected = await sdk.connect();
        if(connected) {
            console.log("SDK Connected");
            let state = await waitForPlayerSelect(sdk);
            let {
                id,
                uri: track_uri,
                name: track_name,
                duration_ms,
                position,
                artists,
                album: {
                    name: album_name,
                    uri: album_uri,
                    images: album_images
                }
            } = state.track_window.current_track;
            console.log(`WE LISTENING TO ${track_name} by ${artists[0].name}!`);
        }
        else {
            console.log("Not connected");   
        }
    })();

    
    
/*
  window.onSpotifyWebPlaybackSDKReady = () => {
      const token = "<%=current_spotify_user.access_token.to_s%>";
      const player = new Spotify.Player({
          name: "Feelng's Player",
          getOauthToken: cb => { cb(token); }
      });    

      player.addListener('initialization_error', ({ message }) => { console.error(message); });
        player.addListener('authentication_error', ({ message }) => { console.error(message); });
        player.addListener('account_error', ({ message }) => { console.error(message); });
        player.addListener('playback_error', ({ message }) => { console.error(message); });

        // Playback status updates
        player.addListener('player_state_changed', state => { console.log(state); });

        player.addListener('player_state_changed', ({
            track_window: {current_track}
        }) => {
            document.getElementById("track_name").innerHTML = "Track Name " + current_track.name;
            document.getElementById("artist").innerHTML = "Artist: " + current_track.artists[0].name;
            document.getElementById("album").innerHTML = "Album: " + current_track.album.name;
            document.getElementById("album_cover").src = current_track.album.images[0].url;
        });

        // Ready
        player.addListener('ready', ({ device_id }) => {
          console.log('Ready with Device ID', device_id);
        });

        // Not Ready
        player.addListener('not_ready', ({ device_id }) => {
          console.log('Device ID has gone offline', device_id);
        });

        

       

        // Connect to the player!
        player.connect();

    

  };

  function play(device_id, playlist_uri) {
  $.ajax({
    url: "https://api.spotify.com/v1/me/player/play?device_id=" + device_id,
    type: "PUT",
    data: JSON.stringify({"context_uri":playlist_uri}),
    beforeSend: function(xhr){xhr.setRequestHeader('Authorization', 'Bearer <%=current_spotify_user.access_token%>'  );},
    success: function(data) { 
        console.log(data);
    },
    error: function(data) {
        console.log(data);
    }
  });
}*/

</script>